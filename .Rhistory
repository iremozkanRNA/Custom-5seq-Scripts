rm(list=ls())
lapply(c("dplyr", "UpSetR"), library, character.only=T)
fh1 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/ChlData_fRanked.csv") %>% filter(rank == "primary",Genome == "NDCt60", Locus != "", TSSUTR =="")
fh2 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/KsgData_fRanked.csv") %>% filter(rank == "primary", Genome == "NDCt60", Locus != "", TSSUTR =="")
fh1 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/ChlData_fRanked.csv") %>% filter(rank == "primary",Genome == "NDCt60", Locus != "", TSSUTR =="")
fh2 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/KsgData_fRanked.csv") %>% filter(rank == "primary", Genome == "NDCt60", Locus != "", TSSUTR =="")
tss1 <- unique(fh1$SuperPos)
tss2 <- unique((fh2$SuperPos))
tss_list <- list(Chl = tss1, Ksg = tss2)
upset( fromList(tss_list),
sets = c("Chl", "Ksg"),
order.by="degree",
sets.bar.color = c("#108080", "#7F0440"))
# Clean environment and load libraries
rm(list=ls())
lapply(c("dplyr", "UpSetR"), library, character.only = TRUE)
# Read in data
fh1 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/ChlData_fRanked.csv")
fh2 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/KsgData_fRanked.csv")
# Filter for each genome and extract unique SuperPos
ndc1 <- fh1 %>% filter(rank == "primary", Genome == "NDCt60", TSSUTR != "")
ndc2 <- fh2 %>% filter(rank == "primary", Genome == "NDCt60", TSSUTR != "")
chl1 <- fh1 %>% filter(rank == "primary", Genome == "Chl3q_t60", TSSUTR != "")
ksg1 <- fh2 %>% filter(rank == "primary", Genome == "Ksg3q_t60", TSSUTR != "")
superpos_ndc1 <- unique(ndc1$SuperPos)
superpos_ndc2 <- unique(ndc2$SuperPos)
superpos_chl1 <- unique(chl1$SuperPos)
superpos_ksg1 <- unique(ksg1$SuperPos)
# Combine NDC SuperPos as NDCall
NDCall <- union(superpos_ndc1, superpos_ndc2)
# Get all unique SuperPos across all sets
all_superpos <- union(union(NDCall, superpos_chl1), superpos_ksg1)
# Build the binary matrix for UpSetR
ndc_matrix <- data.frame(
SuperPos = all_superpos,
NDCall = as.integer(all_superpos %in% NDCall),
Chl3q_t60 = as.integer(all_superpos %in% superpos_chl1),
Ksg3q_t60 = as.integer(all_superpos %in% superpos_ksg1)
)
rownames(ndc_matrix) <- ndc_matrix$SuperPos
ndc_matrix$SuperPos <- NULL
# Set colors for the sets in the same order as in the upset() call
set_colors <- c("gray", "#7F0440","#108080")
# Draw the UpSet plot
upset(ndc_matrix,
sets = c("NDCall", "Chl3q_t60", "Ksg3q_t60"),
order.by = "freq",
mainbar.y.label = "Intersection Size",
sets.x.label = "SuperPos per Group",
sets.bar.color = set_colors)
# Clean environment and load libraries
rm(list=ls())
lapply(c("dplyr", "UpSetR"), library, character.only = TRUE)
# Read in data
fh1 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/ChlData_fRanked.csv")
fh2 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/KsgData_fRanked.csv")
# Filter for each genome and extract unique SuperPos
ndc1 <- fh1 %>% filter(rank == "primary", Genome == "NDCt60", TSSUTR != "")
ndc2 <- fh2 %>% filter(rank == "primary", Genome == "NDCt60", TSSUTR != "")
chl1 <- fh1 %>% filter(rank == "primary", Genome == "Chl3q_t60", TSSUTR != "")
ksg1 <- fh2 %>% filter(rank == "primary", Genome == "Ksg3q_t60", TSSUTR != "")
superpos_ndc1 <- unique(ndc1$SuperPos)
superpos_ndc2 <- unique(ndc2$SuperPos)
superpos_chl1 <- unique(chl1$SuperPos)
superpos_ksg1 <- unique(ksg1$SuperPos)
# Combine NDC SuperPos as NDCall
NDCall <- union(superpos_ndc1, superpos_ndc2)
# Get all unique SuperPos across all sets
all_superpos <- union(union(NDCall, superpos_chl1), superpos_ksg1)
# Build the binary matrix for UpSetR
ndc_matrix <- data.frame(
SuperPos = all_superpos,
NDCall = as.integer(all_superpos %in% NDCall),
Chl3q_t60 = as.integer(all_superpos %in% superpos_chl1),
Ksg3q_t60 = as.integer(all_superpos %in% superpos_ksg1)
)
rownames(ndc_matrix) <- ndc_matrix$SuperPos
ndc_matrix$SuperPos <- NULL
# Set colors for the sets in the same order as in the upset() call
set_colors <- c("gray", "#7F0440","#108080")
# Draw the UpSet plot
upset(ndc_matrix,
sets = c("NDCall", "Chl3q_t60", "Ksg3q_t60"),
order.by = "freq",
mainbar.y.label = "Intersection Size",
sets.x.label = "SuperPos per Group",
sets.bar.color = set_colors,
main.bar.y.max = 500)
# Clean environment and load libraries
rm(list=ls())
lapply(c("dplyr", "UpSetR"), library, character.only = TRUE)
# Read in data
fh1 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/ChlData_fRanked.csv")
fh2 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/KsgData_fRanked.csv")
# Filter for each genome and extract unique SuperPos
ndc1 <- fh1 %>% filter(rank == "primary", Genome == "NDCt60", TSSUTR != "")
ndc2 <- fh2 %>% filter(rank == "primary", Genome == "NDCt60", TSSUTR != "")
chl1 <- fh1 %>% filter(rank == "primary", Genome == "Chl3q_t60", TSSUTR != "")
ksg1 <- fh2 %>% filter(rank == "primary", Genome == "Ksg3q_t60", TSSUTR != "")
superpos_ndc1 <- unique(ndc1$SuperPos)
superpos_ndc2 <- unique(ndc2$SuperPos)
superpos_chl1 <- unique(chl1$SuperPos)
superpos_ksg1 <- unique(ksg1$SuperPos)
# Combine NDC SuperPos as NDCall
NDCall <- union(superpos_ndc1, superpos_ndc2)
# Get all unique SuperPos across all sets
all_superpos <- union(union(NDCall, superpos_chl1), superpos_ksg1)
# Build the binary matrix for UpSetR
ndc_matrix <- data.frame(
SuperPos = all_superpos,
NDCall = as.integer(all_superpos %in% NDCall),
Chl3q_t60 = as.integer(all_superpos %in% superpos_chl1),
Ksg3q_t60 = as.integer(all_superpos %in% superpos_ksg1)
)
rownames(ndc_matrix) <- ndc_matrix$SuperPos
ndc_matrix$SuperPos <- NULL
# Set colors for the sets in the same order as in the upset() call
set_colors <- c("gray", "#7F0440","#108080")
# Draw the UpSet plot
upset(ndc_matrix,
sets = c("NDCall", "Chl3q_t60", "Ksg3q_t60"),
order.by = "freq",
mainbar.y.label = "Intersection Size",
sets.x.label = "SuperPos per Group",
sets.bar.color = set_colors)
ylim(0, 500)
# Clean environment and load libraries
rm(list=ls())
lapply(c("dplyr", "UpSetR"), library, character.only = TRUE)
# Read in data
fh1 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/ChlData_fRanked.csv")
fh2 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/KsgData_fRanked.csv")
# Filter for each genome and extract unique SuperPos
ndc1 <- fh1 %>% filter(rank == "primary", Genome == "NDCt60", TSSUTR != "")
ndc2 <- fh2 %>% filter(rank == "primary", Genome == "NDCt60", TSSUTR != "")
chl1 <- fh1 %>% filter(rank == "primary", Genome == "Chl3q_t60", TSSUTR != "")
ksg1 <- fh2 %>% filter(rank == "primary", Genome == "Ksg3q_t60", TSSUTR != "")
superpos_ndc1 <- unique(ndc1$SuperPos)
superpos_ndc2 <- unique(ndc2$SuperPos)
superpos_chl1 <- unique(chl1$SuperPos)
superpos_ksg1 <- unique(ksg1$SuperPos)
# Combine NDC SuperPos as NDCall
NDCall <- union(superpos_ndc1, superpos_ndc2)
# Get all unique SuperPos across all sets
all_superpos <- union(union(NDCall, superpos_chl1), superpos_ksg1)
# Build the binary matrix for UpSetR
ndc_matrix <- data.frame(
SuperPos = all_superpos,
NDCall = as.integer(all_superpos %in% NDCall),
Chl3q_t60 = as.integer(all_superpos %in% superpos_chl1),
Ksg3q_t60 = as.integer(all_superpos %in% superpos_ksg1)
)
rownames(ndc_matrix) <- ndc_matrix$SuperPos
ndc_matrix$SuperPos <- NULL
# Set colors for the sets in the same order as in the upset() call
set_colors <- c("gray", "#7F0440","#108080")
# Draw the UpSet plot
upset(
ndc_matrix,
sets = c("NDCall", "Chl3q_t60", "Ksg3q_t60"),
order.by = "freq",
mainbar.y.label = "Intersection Size",
sets.x.label = "SuperPos per Group",
sets.bar.color = set_colors,
main.bar.y.max = 500  # Set y-axis maximum to 500
)
packageVersion("UpSetR")
# Install if needed
install.packages("ComplexUpset")
library(ComplexUpset)
library(ggplot2)
# Prepare your data as before, then:
ggplot(ndc_matrix, aes(x=...)) +  # your data prep here
upset(
sets = c("NDCall", "Chl3q_t60", "Ksg3q_t60")
) +
ylim(0, 500)  # This works with ggplot2
# Prepare your data as before, then:
ggplot(ndc_matrix, aes(x=...)) +  # your data prep here
upset(
sets = c("NDCall", "Chl3q_t60", "Ksg3q_t60")
) +
ylim(0, 500)  # This works with ggplot2
# Install ComplexUpset if not already installed
if (!requireNamespace("ComplexUpset", quietly = TRUE)) {
install.packages("ComplexUpset", repos = c('https://krassowski.r-universe.dev', 'https://cloud.r-project.org'))
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
library(dplyr)
library(ComplexUpset)
library(ggplot2)
# Install ComplexUpset if not already installed
if (!requireNamespace("ComplexUpset", quietly = TRUE)) {
install.packages("ComplexUpset", repos = c('https://krassowski.r-universe.dev', 'https://cloud.r-project.org'))
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
library(dplyr)
library(ComplexUpset)
library(ggplot2)
# Read in data
fh1 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/ChlData_fRanked.csv")
fh2 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/KsgData_fRanked.csv")
# Filter for each genome and extract unique SuperPos
ndc1 <- fh1 %>% filter(rank == "primary", Genome == "NDCt60", TSSUTR != "")
ndc2 <- fh2 %>% filter(rank == "primary", Genome == "NDCt60", TSSUTR != "")
chl1 <- fh1 %>% filter(rank == "primary", Genome == "Chl3q_t60", TSSUTR != "")
ksg1 <- fh2 %>% filter(rank == "primary", Genome == "Ksg3q_t60", TSSUTR != "")
superpos_ndc1 <- unique(ndc1$SuperPos)
superpos_ndc2 <- unique(ndc2$SuperPos)
superpos_chl1 <- unique(chl1$SuperPos)
superpos_ksg1 <- unique(ksg1$SuperPos)
NDCall <- union(superpos_ndc1, superpos_ndc2)
all_superpos <- union(union(NDCall, superpos_chl1), superpos_ksg1)
# Build the binary matrix for UpSet plotting
ndc_matrix <- data.frame(
SuperPos = all_superpos,
NDCall = as.integer(all_superpos %in% NDCall),
Chl3q_t60 = as.integer(all_superpos %in% superpos_chl1),
Ksg3q_t60 = as.integer(all_superpos %in% superpos_ksg1)
)
# ComplexUpset expects the data in wide format, with binary columns for each set
ggplot(ndc_matrix, aes(
NDCall = NDCall,
Chl3q_t60 = Chl3q_t60,
Ksg3q_t60 = Ksg3q_t60
)) +
upset(
intersect = c("NDCall", "Chl3q_t60", "Ksg3q_t60"),
base_annotations = list(
'Intersection Size' = (
ggplot2::geom_bar(stat = 'count') +
ggplot2::scale_y_continuous(limits = c(0, 500)) +
ggplot2::ylab("Intersection Size")
)
),
set_sizes = (
upset_set_size() +
ggplot2::ylab("SuperPos per Group")
)
) +
ggplot2::scale_fill_manual(values = c("gray", "#7F0440", "#108080"))
# Install if necessary
if (!requireNamespace("ComplexUpset", quietly = TRUE)) {
install.packages("ComplexUpset", repos = c('https://krassowski.r-universe.dev', 'https://cloud.r-project.org'))
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
library(dplyr)
library(ComplexUpset)
library(ggplot2)
# Read in data
fh1 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/ChlData_fRanked.csv")
fh2 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/KsgData_fRanked.csv")
# Filter for each genome and extract unique SuperPos
ndc1 <- fh1 %>% filter(rank == "primary", Genome == "NDCt60", TSSUTR != "")
ndc2 <- fh2 %>% filter(rank == "primary", Genome == "NDCt60", TSSUTR != "")
chl1 <- fh1 %>% filter(rank == "primary", Genome == "Chl3q_t60", TSSUTR != "")
ksg1 <- fh2 %>% filter(rank == "primary", Genome == "Ksg3q_t60", TSSUTR != "")
superpos_ndc1 <- unique(ndc1$SuperPos)
superpos_ndc2 <- unique(ndc2$SuperPos)
superpos_chl1 <- unique(chl1$SuperPos)
superpos_ksg1 <- unique(ksg1$SuperPos)
NDCall <- union(superpos_ndc1, superpos_ndc2)
all_superpos <- union(union(NDCall, superpos_chl1), superpos_ksg1)
# Build the binary matrix for UpSet plotting
ndc_matrix <- data.frame(
SuperPos = all_superpos,
NDCall = as.integer(all_superpos %in% NDCall),
Chl3q_t60 = as.integer(all_superpos %in% superpos_chl1),
Ksg3q_t60 = as.integer(all_superpos %in% superpos_ksg1)
)
# Make sure columns are logical (ComplexUpset prefers logical for set membership)
ndc_matrix$NDCall <- as.logical(ndc_matrix$NDCall)
ndc_matrix$Chl3q_t60 <- as.logical(ndc_matrix$Chl3q_t60)
ndc_matrix$Ksg3q_t60 <- as.logical(ndc_matrix$Ksg3q_t60)
# Set custom colors for intersection bars (order matches the intersection order)
intersection_colors <- c("gray", "#7F0440", "#108080")
# Create the plot
ggplot(ndc_matrix) +
upset(
intersect = c("NDCall", "Chl3q_t60", "Ksg3q_t60"),
base_annotations = list(
'Intersection Size' = (
intersection_size(
counts = TRUE,
mapping = aes(fill = as.factor(.intersection))
) +
scale_y_continuous(limits = c(0, 500)) +
scale_fill_manual(
values = intersection_colors,
guide = "none"
)
)
),
set_sizes = (
upset_set_size() +
ylab("SuperPos per Group")
)
) +
ylab("Intersection Size")
# Read in data
fh1 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/ChlData_fRanked.csv")
fh2 <- read.csv("~/Desktop/Stuff/AMeyer_Lab/Experiment_results/5seq/TSSPredIremOutput/KsgData_fRanked.csv")
# Filter for each genome and extract unique SuperPos
ndc1 <- fh1 %>% filter(rank == "primary", Genome == "NDCt60", TSSUTR != "")
ndc2 <- fh2 %>% filter(rank == "primary", Genome == "NDCt60", TSSUTR != "")
chl1 <- fh1 %>% filter(rank == "primary", Genome == "Chl3q_t60", TSSUTR != "")
ksg1 <- fh2 %>% filter(rank == "primary", Genome == "Ksg3q_t60", TSSUTR != "")
superpos_ndc1 <- unique(ndc1$SuperPos)
superpos_ndc2 <- unique(ndc2$SuperPos)
superpos_chl1 <- unique(chl1$SuperPos)
superpos_ksg1 <- unique(ksg1$SuperPos)
NDCall <- union(superpos_ndc1, superpos_ndc2)
all_superpos <- union(union(NDCall, superpos_chl1), superpos_ksg1)
# Build the binary matrix for UpSet plotting
ndc_matrix <- data.frame(
SuperPos = all_superpos,
NDCall = as.integer(all_superpos %in% NDCall),
Chl3q_t60 = as.integer(all_superpos %in% superpos_chl1),
Ksg3q_t60 = as.integer(all_superpos %in% superpos_ksg1)
)
# Make sure columns are logical (ComplexUpset prefers logical for set membership)
ndc_matrix$NDCall <- as.logical(ndc_matrix$NDCall)
ndc_matrix$Chl3q_t60 <- as.logical(ndc_matrix$Chl3q_t60)
ndc_matrix$Ksg3q_t60 <- as.logical(ndc_matrix$Ksg3q_t60)
# Set custom colors for intersection bars (order matches the intersection order)
intersection_colors <- c("gray", "#7F0440", "#108080")
# Create the plot
ggplot(ndc_matrix) +
upset(
intersect = c("NDCall", "Chl3q_t60", "Ksg3q_t60"),
base_annotations = list(
'Intersection Size' = (
intersection_size(
counts = TRUE,
mapping = aes(fill = as.factor(.intersection))
) +
scale_y_continuous(limits = c(0, 500)) +
scale_fill_manual(
values = intersection_colors,
guide = "none"
)
)
),
set_sizes = (
upset_set_size() +
ylab("SuperPos per Group")
)
) +
ylab("Intersection Size")
